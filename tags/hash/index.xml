<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hash on srcrs</title>
        <link>https://srcrs.github.io/tags/hash/</link>
        <description>Recent content in Hash on srcrs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 11 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://srcrs.github.io/tags/hash/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>hash算法与一致性hash算法</title>
        <link>https://srcrs.github.io/posts/hash-algorithm-and-consistent-hash-algorithm/</link>
        <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
        
        <guid>https://srcrs.github.io/posts/hash-algorithm-and-consistent-hash-algorithm/</guid>
        <description>&lt;h2 id=&#34;什么是hash&#34;&gt;
    &lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afhash&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    什么是hash？
&lt;/h2&gt;&lt;p&gt;hash也被称作散列、哈希，其基本原理是将任意长度的输入，通过hash函数映射成固定长度的输出，开发中使用MD5、SHA都是经典hash算法。常被用来验证数据是否被篡改。&lt;/p&gt;
&lt;h2 id=&#34;hash算法使用场景&#34;&gt;
    &lt;a href=&#34;#hash%e7%ae%97%e6%b3%95%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    hash算法使用场景
&lt;/h2&gt;&lt;h3 id=&#34;哈希函数&#34;&gt;
    &lt;a href=&#34;#%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    哈希函数
&lt;/h3&gt;&lt;p&gt;在哈希函数中可以使用哈希算法对key值进行散列，根据hash值确定该key的散列表存储位置，需要注意散列表的平均性。&lt;/p&gt;
&lt;h3 id=&#34;唯一标识&#34;&gt;
    &lt;a href=&#34;#%e5%94%af%e4%b8%80%e6%a0%87%e8%af%86&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    唯一标识
&lt;/h3&gt;&lt;p&gt;在绝大部分情况下，hash算法针对不同的二进制内容生成的hash值是不一样的，但由于hash会导致hash碰撞（冲突），因此可能存在hash值相同，而二进制内容不同的情况发生，这点需要注意。&lt;/p&gt;
&lt;h3 id=&#34;数据校验&#34;&gt;
    &lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e6%a0%a1%e9%aa%8c&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    数据校验
&lt;/h3&gt;&lt;p&gt;当一个软件打包完成后，使用hash算法，便可得到该软件包的二进制值，可以用来判断软件包是否被篡改。但此校验并无完全正确，存在出错的可能。&lt;/p&gt;
&lt;h3 id=&#34;安全加密&#34;&gt;
    &lt;a href=&#34;#%e5%ae%89%e5%85%a8%e5%8a%a0%e5%af%86&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    安全加密
&lt;/h3&gt;&lt;p&gt;由于哈希具有不可逆性，黑客原则上是无法通过hash值反解其原本内容；相同的二进制内容，hash值相同。针对这两点特性，可以将其应用在敏感数据的安全性方面，如用户的密码存储等。当二进制内容过于简单时，黑客很可能会通过爆破方式进行破解，可引入“盐”，简单说就是一串用户自定义内容，防止黑客很容易破解。&lt;/p&gt;
&lt;h3 id=&#34;分布式&#34;&gt;
    &lt;a href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    分布式
&lt;/h3&gt;</description>
        </item>
        
    </channel>
</rss>

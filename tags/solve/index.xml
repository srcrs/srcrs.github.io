<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Solve on srcrs</title>
        <link>https://srcrs.github.io/tags/solve/</link>
        <description>Recent content in Solve on srcrs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 10 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://srcrs.github.io/tags/solve/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>记录一下问题排查过程</title>
        <link>https://srcrs.github.io/posts/solve-test-problem/</link>
        <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://srcrs.github.io/posts/solve-test-problem/</guid>
        <description>&lt;h2 id=&#34;问题描述&#34;&gt;
    &lt;a href=&#34;#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    问题描述：
&lt;/h2&gt;&lt;p&gt;前端和后端在联调接口，因为一些特殊需要，需要将接口超时时间设置为2分钟，但是几经更改仍然没有生效，大概30秒左右超时断开，接口调用是通过域名，因此我询问nginx影响，得到反馈是已经设置了，但仍然是超时了。随后便开始排查这个问题。&lt;/p&gt;
&lt;h2 id=&#34;问题分析过程&#34;&gt;
    &lt;a href=&#34;#%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90%e8%bf%87%e7%a8%8b&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    问题分析过程
&lt;/h2&gt;&lt;h3 id=&#34;确认问题复现步骤&#34;&gt;
    &lt;a href=&#34;#%e7%a1%ae%e8%ae%a4%e9%97%ae%e9%a2%98%e5%a4%8d%e7%8e%b0%e6%ad%a5%e9%aa%a4&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    确认问题复现步骤
&lt;/h3&gt;&lt;p&gt;在本次问题中，可以通过curl请求即可复现。&lt;/p&gt;
&lt;h3 id=&#34;是否是nginx设置了超时&#34;&gt;
    &lt;a href=&#34;#%e6%98%af%e5%90%a6%e6%98%afnginx%e8%ae%be%e7%bd%ae%e4%ba%86%e8%b6%85%e6%97%b6&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    是否是nginx设置了超时？
&lt;/h3&gt;&lt;h4 id=&#34;确认部署机器&#34;&gt;
    &lt;a href=&#34;#%e7%a1%ae%e8%ae%a4%e9%83%a8%e7%bd%b2%e6%9c%ba%e5%99%a8&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    确认部署机器
&lt;/h4&gt;&lt;p&gt;假设接口是：https://api.xxxx.com ，我需要确认实际请求的机器，使用如下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -v &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api.xxxx.com&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过&lt;code&gt;-v&lt;/code&gt;命令可以，查询到curl请求更详细的过程，格式类似如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*   Trying 198.18.1.220:80...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Connected to baidu.com (198.18.1.220) port 80 (#0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; GET / HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Host: baidu.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; User-Agent: curl/7.87.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; Accept: */*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Empty reply from server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Closing connection 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl: (52) Empty reply from server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;便得到第一步请求到达了 198.18.1.220 机器，登录进行查看。&lt;/p&gt;
&lt;h4 id=&#34;确认web服务器是什么查看日志&#34;&gt;
    &lt;a href=&#34;#%e7%a1%ae%e8%ae%a4web%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%98%af%e4%bb%80%e4%b9%88%e6%9f%a5%e7%9c%8b%e6%97%a5%e5%bf%97&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    确认web服务器是什么查看日志
&lt;/h4&gt;&lt;p&gt;公司用到最多的是nginx和haproxy，因此直接使用命令可以查到，这二者同时使用存在端口冲突，一般只会一台机器有一个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ps -ef &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ps -ef &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep haproxy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;结果类似如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root      2662     1  0 07:12 ?        00:00:00 nginx: master process /usr/sbin/nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过结果可分析出进程的启动目录，目的是找到日志文件。如果进程中无法分析出，可以进一步通过find命令查看，nginx默认配置文件是&lt;code&gt;nginx.conf&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;find / -name nginx.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在logs目录中找到nginx错误日志error.log，检索接口，看到有超时日志，接着查看配置信息，有30秒超时设置，因此这里是要更改的。&lt;/p&gt;
&lt;h4 id=&#34;nginx配置更新&#34;&gt;
    &lt;a href=&#34;#nginx%e9%85%8d%e7%bd%ae%e6%9b%b4%e6%96%b0&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    nginx配置更新
&lt;/h4&gt;&lt;p&gt;将30秒超时时间更改为300秒后，再次请求接口，仍然大概30秒断开，但是这次并没有错误信息，返回空值。需要继续排查下去。&lt;/p&gt;
&lt;h3 id=&#34;是否是apigateway层原因&#34;&gt;
    &lt;a href=&#34;#%e6%98%af%e5%90%a6%e6%98%afapigateway%e5%b1%82%e5%8e%9f%e5%9b%a0&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    是否是apigateway层原因
&lt;/h3&gt;&lt;p&gt;nginx在本次请求链中的作用是反向代理，直接将请求转发到apigateway层，这是一个golang程序，之前有过一些了解，直接找到其日志文件，再次curl进行复现，令我好奇的是，gateway程序有打印正常返回日志，但是却未返回。&lt;/p&gt;
&lt;p&gt;因此网关层应该是有设置超时时间的。&lt;/p&gt;
&lt;p&gt;在conf目录中找到了几个配置文件，看了一圈并不能确认哪个是超时字段，只有app.conf中有个ServerTimeout字段设置了20，此时我并不知道他就是beego的默认启动配置文件。抱着实验的想法，将20改成了60，将程序重启，然后就有正常返回了。后面还找了好一会ServerTimeout的初始化位置，后面才知道这里是在框架层做的，所以是找不到的。&lt;/p&gt;
&lt;p&gt;到此，解决了这个问题。&lt;/p&gt;
&lt;p&gt;总结改动点：nginx路径超时时间、apigateway网关层超时时间。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
